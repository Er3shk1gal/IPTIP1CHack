// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/analytic.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace AnalyticGrpc {
  public static partial class Analytic
  {
    static readonly string __ServiceName = "analytic.Analytic";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AnalyticGrpc.Request> __Marshaller_analytic_Request = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AnalyticGrpc.Request.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::AnalyticGrpc.Response> __Marshaller_analytic_Response = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AnalyticGrpc.Response.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response> __Method_GetAttendanceTimePercent = new grpc::Method<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAttendanceTimePercent",
        __Marshaller_analytic_Request,
        __Marshaller_analytic_Response);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response> __Method_GetAttendancePercentSubject = new grpc::Method<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAttendancePercentSubject",
        __Marshaller_analytic_Request,
        __Marshaller_analytic_Response);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response> __Method_GetAttendancePercentWeekday = new grpc::Method<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAttendancePercentWeekday",
        __Marshaller_analytic_Request,
        __Marshaller_analytic_Response);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response> __Method_GetQuestionsCompletionPercent = new grpc::Method<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetQuestionsCompletionPercent",
        __Marshaller_analytic_Request,
        __Marshaller_analytic_Response);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response> __Method_GetQuestionMostPopularAnswer = new grpc::Method<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetQuestionMostPopularAnswer",
        __Marshaller_analytic_Request,
        __Marshaller_analytic_Response);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response> __Method_GetTestCompletionProgressPercent = new grpc::Method<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTestCompletionProgressPercent",
        __Marshaller_analytic_Request,
        __Marshaller_analytic_Response);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response> __Method_GetTestAverageCompletionTime = new grpc::Method<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTestAverageCompletionTime",
        __Marshaller_analytic_Request,
        __Marshaller_analytic_Response);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response> __Method_GetTestExpiredPercent = new grpc::Method<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTestExpiredPercent",
        __Marshaller_analytic_Request,
        __Marshaller_analytic_Response);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response> __Method_GetTestAverageResult = new grpc::Method<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTestAverageResult",
        __Marshaller_analytic_Request,
        __Marshaller_analytic_Response);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response> __Method_GetTestAverageTries = new grpc::Method<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTestAverageTries",
        __Marshaller_analytic_Request,
        __Marshaller_analytic_Response);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response> __Method_GetTestSuccessAttemptsPercent = new grpc::Method<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTestSuccessAttemptsPercent",
        __Marshaller_analytic_Request,
        __Marshaller_analytic_Response);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::AnalyticGrpc.AnalyticReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Analytic</summary>
    [grpc::BindServiceMethod(typeof(Analytic), "BindService")]
    public abstract partial class AnalyticBase
    {
      /// <summary>
      ///Attendance
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AnalyticGrpc.Response> GetAttendanceTimePercent(global::AnalyticGrpc.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AnalyticGrpc.Response> GetAttendancePercentSubject(global::AnalyticGrpc.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AnalyticGrpc.Response> GetAttendancePercentWeekday(global::AnalyticGrpc.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Questions
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AnalyticGrpc.Response> GetQuestionsCompletionPercent(global::AnalyticGrpc.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AnalyticGrpc.Response> GetQuestionMostPopularAnswer(global::AnalyticGrpc.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///Tests
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AnalyticGrpc.Response> GetTestCompletionProgressPercent(global::AnalyticGrpc.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AnalyticGrpc.Response> GetTestAverageCompletionTime(global::AnalyticGrpc.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AnalyticGrpc.Response> GetTestExpiredPercent(global::AnalyticGrpc.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AnalyticGrpc.Response> GetTestAverageResult(global::AnalyticGrpc.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AnalyticGrpc.Response> GetTestAverageTries(global::AnalyticGrpc.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::AnalyticGrpc.Response> GetTestSuccessAttemptsPercent(global::AnalyticGrpc.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Analytic</summary>
    public partial class AnalyticClient : grpc::ClientBase<AnalyticClient>
    {
      /// <summary>Creates a new client for Analytic</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AnalyticClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Analytic that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public AnalyticClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AnalyticClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected AnalyticClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///Attendance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AnalyticGrpc.Response GetAttendanceTimePercent(global::AnalyticGrpc.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAttendanceTimePercent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Attendance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AnalyticGrpc.Response GetAttendanceTimePercent(global::AnalyticGrpc.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAttendanceTimePercent, null, options, request);
      }
      /// <summary>
      ///Attendance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AnalyticGrpc.Response> GetAttendanceTimePercentAsync(global::AnalyticGrpc.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAttendanceTimePercentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Attendance
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AnalyticGrpc.Response> GetAttendanceTimePercentAsync(global::AnalyticGrpc.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAttendanceTimePercent, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AnalyticGrpc.Response GetAttendancePercentSubject(global::AnalyticGrpc.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAttendancePercentSubject(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AnalyticGrpc.Response GetAttendancePercentSubject(global::AnalyticGrpc.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAttendancePercentSubject, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AnalyticGrpc.Response> GetAttendancePercentSubjectAsync(global::AnalyticGrpc.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAttendancePercentSubjectAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AnalyticGrpc.Response> GetAttendancePercentSubjectAsync(global::AnalyticGrpc.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAttendancePercentSubject, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AnalyticGrpc.Response GetAttendancePercentWeekday(global::AnalyticGrpc.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAttendancePercentWeekday(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AnalyticGrpc.Response GetAttendancePercentWeekday(global::AnalyticGrpc.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAttendancePercentWeekday, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AnalyticGrpc.Response> GetAttendancePercentWeekdayAsync(global::AnalyticGrpc.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAttendancePercentWeekdayAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AnalyticGrpc.Response> GetAttendancePercentWeekdayAsync(global::AnalyticGrpc.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAttendancePercentWeekday, null, options, request);
      }
      /// <summary>
      ///Questions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AnalyticGrpc.Response GetQuestionsCompletionPercent(global::AnalyticGrpc.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQuestionsCompletionPercent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Questions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AnalyticGrpc.Response GetQuestionsCompletionPercent(global::AnalyticGrpc.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetQuestionsCompletionPercent, null, options, request);
      }
      /// <summary>
      ///Questions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AnalyticGrpc.Response> GetQuestionsCompletionPercentAsync(global::AnalyticGrpc.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQuestionsCompletionPercentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Questions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AnalyticGrpc.Response> GetQuestionsCompletionPercentAsync(global::AnalyticGrpc.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetQuestionsCompletionPercent, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AnalyticGrpc.Response GetQuestionMostPopularAnswer(global::AnalyticGrpc.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQuestionMostPopularAnswer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AnalyticGrpc.Response GetQuestionMostPopularAnswer(global::AnalyticGrpc.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetQuestionMostPopularAnswer, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AnalyticGrpc.Response> GetQuestionMostPopularAnswerAsync(global::AnalyticGrpc.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQuestionMostPopularAnswerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AnalyticGrpc.Response> GetQuestionMostPopularAnswerAsync(global::AnalyticGrpc.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetQuestionMostPopularAnswer, null, options, request);
      }
      /// <summary>
      ///Tests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AnalyticGrpc.Response GetTestCompletionProgressPercent(global::AnalyticGrpc.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTestCompletionProgressPercent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Tests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AnalyticGrpc.Response GetTestCompletionProgressPercent(global::AnalyticGrpc.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTestCompletionProgressPercent, null, options, request);
      }
      /// <summary>
      ///Tests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AnalyticGrpc.Response> GetTestCompletionProgressPercentAsync(global::AnalyticGrpc.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTestCompletionProgressPercentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///Tests
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AnalyticGrpc.Response> GetTestCompletionProgressPercentAsync(global::AnalyticGrpc.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTestCompletionProgressPercent, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AnalyticGrpc.Response GetTestAverageCompletionTime(global::AnalyticGrpc.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTestAverageCompletionTime(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AnalyticGrpc.Response GetTestAverageCompletionTime(global::AnalyticGrpc.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTestAverageCompletionTime, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AnalyticGrpc.Response> GetTestAverageCompletionTimeAsync(global::AnalyticGrpc.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTestAverageCompletionTimeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AnalyticGrpc.Response> GetTestAverageCompletionTimeAsync(global::AnalyticGrpc.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTestAverageCompletionTime, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AnalyticGrpc.Response GetTestExpiredPercent(global::AnalyticGrpc.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTestExpiredPercent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AnalyticGrpc.Response GetTestExpiredPercent(global::AnalyticGrpc.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTestExpiredPercent, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AnalyticGrpc.Response> GetTestExpiredPercentAsync(global::AnalyticGrpc.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTestExpiredPercentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AnalyticGrpc.Response> GetTestExpiredPercentAsync(global::AnalyticGrpc.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTestExpiredPercent, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AnalyticGrpc.Response GetTestAverageResult(global::AnalyticGrpc.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTestAverageResult(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AnalyticGrpc.Response GetTestAverageResult(global::AnalyticGrpc.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTestAverageResult, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AnalyticGrpc.Response> GetTestAverageResultAsync(global::AnalyticGrpc.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTestAverageResultAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AnalyticGrpc.Response> GetTestAverageResultAsync(global::AnalyticGrpc.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTestAverageResult, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AnalyticGrpc.Response GetTestAverageTries(global::AnalyticGrpc.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTestAverageTries(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AnalyticGrpc.Response GetTestAverageTries(global::AnalyticGrpc.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTestAverageTries, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AnalyticGrpc.Response> GetTestAverageTriesAsync(global::AnalyticGrpc.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTestAverageTriesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AnalyticGrpc.Response> GetTestAverageTriesAsync(global::AnalyticGrpc.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTestAverageTries, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AnalyticGrpc.Response GetTestSuccessAttemptsPercent(global::AnalyticGrpc.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTestSuccessAttemptsPercent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::AnalyticGrpc.Response GetTestSuccessAttemptsPercent(global::AnalyticGrpc.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTestSuccessAttemptsPercent, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AnalyticGrpc.Response> GetTestSuccessAttemptsPercentAsync(global::AnalyticGrpc.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTestSuccessAttemptsPercentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::AnalyticGrpc.Response> GetTestSuccessAttemptsPercentAsync(global::AnalyticGrpc.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTestSuccessAttemptsPercent, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override AnalyticClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AnalyticClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(AnalyticBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetAttendanceTimePercent, serviceImpl.GetAttendanceTimePercent)
          .AddMethod(__Method_GetAttendancePercentSubject, serviceImpl.GetAttendancePercentSubject)
          .AddMethod(__Method_GetAttendancePercentWeekday, serviceImpl.GetAttendancePercentWeekday)
          .AddMethod(__Method_GetQuestionsCompletionPercent, serviceImpl.GetQuestionsCompletionPercent)
          .AddMethod(__Method_GetQuestionMostPopularAnswer, serviceImpl.GetQuestionMostPopularAnswer)
          .AddMethod(__Method_GetTestCompletionProgressPercent, serviceImpl.GetTestCompletionProgressPercent)
          .AddMethod(__Method_GetTestAverageCompletionTime, serviceImpl.GetTestAverageCompletionTime)
          .AddMethod(__Method_GetTestExpiredPercent, serviceImpl.GetTestExpiredPercent)
          .AddMethod(__Method_GetTestAverageResult, serviceImpl.GetTestAverageResult)
          .AddMethod(__Method_GetTestAverageTries, serviceImpl.GetTestAverageTries)
          .AddMethod(__Method_GetTestSuccessAttemptsPercent, serviceImpl.GetTestSuccessAttemptsPercent).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AnalyticBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetAttendanceTimePercent, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response>(serviceImpl.GetAttendanceTimePercent));
      serviceBinder.AddMethod(__Method_GetAttendancePercentSubject, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response>(serviceImpl.GetAttendancePercentSubject));
      serviceBinder.AddMethod(__Method_GetAttendancePercentWeekday, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response>(serviceImpl.GetAttendancePercentWeekday));
      serviceBinder.AddMethod(__Method_GetQuestionsCompletionPercent, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response>(serviceImpl.GetQuestionsCompletionPercent));
      serviceBinder.AddMethod(__Method_GetQuestionMostPopularAnswer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response>(serviceImpl.GetQuestionMostPopularAnswer));
      serviceBinder.AddMethod(__Method_GetTestCompletionProgressPercent, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response>(serviceImpl.GetTestCompletionProgressPercent));
      serviceBinder.AddMethod(__Method_GetTestAverageCompletionTime, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response>(serviceImpl.GetTestAverageCompletionTime));
      serviceBinder.AddMethod(__Method_GetTestExpiredPercent, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response>(serviceImpl.GetTestExpiredPercent));
      serviceBinder.AddMethod(__Method_GetTestAverageResult, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response>(serviceImpl.GetTestAverageResult));
      serviceBinder.AddMethod(__Method_GetTestAverageTries, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response>(serviceImpl.GetTestAverageTries));
      serviceBinder.AddMethod(__Method_GetTestSuccessAttemptsPercent, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AnalyticGrpc.Request, global::AnalyticGrpc.Response>(serviceImpl.GetTestSuccessAttemptsPercent));
    }

  }
}
#endregion
